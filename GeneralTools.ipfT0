//20090210
Function /S num2strD(num)
	variable /D num
	string sval
	sprintf sval, "%g" num
	return sval
end

Function /D str2numD(sval)
	string sval
	variable /D num
	sscanf sval, "%f",  num
	return num
end

function /S genSdate(ctrlName)
	string ctrlName
	string L_date=date()
	string /G S_year, S_month, S_date
	variable V_place=0
	L_date=ReplaceString("”N", L_date, ";")
	L_date=ReplaceString("ŒŽ", L_date, ";")
	L_date=RemoveEnding(L_date, "“ú")
	//print L_date
	S_year=StringFromList(0, L_date)
	S_month=StringFromList(1, L_date)
	S_date=StringFromList(2, L_date)
	//print S_year, S_month, S_date
	return L_date
end

function /S Convert2Polar(wv)
	wave /C wv
	duplicate /O wv, $NameOfWave(wv)+"_Pol"
	wave /C wvPol=$NameOfWave(wv)+"_Pol"
	variable V_threshold=1e-7
	wvPol=r2polar(wv)
	wv=cmplx(sign(real(wv))*real(wv), sign(real(wv))*imag(wv))
	wv=cmplx(real(wv), imag(wv)*sign(imag(wv))*(1-(abs(imag(wv))<V_threshold)))
	wv=cmplx(real(wv), mod(imag(wv), 2*pi))
	return NameOfWave(wvPol)
end

function /S BaseNameGenerator(ctrlName, V_wavelength)
	string ctrlName
	variable V_wavelength
	String  S_BaseFilename=genSdate("RetardationDataAquisition")
	S_BaseFilename=ReplaceString(";", S_BaseFilename, "")
	S_BaseFilename="D"+S_BaseFilename+"_"+num2str(V_wavelength)+"nm_"
	return S_BaseFilename
end

function/S PorM(Val)
	variable Val
	return SelectString((1+sign(Val))/2,"-","+")
end 

function shift(wv, p_start, p_stop, V_val)
	wave wv
	variable  p_start, p_stop, V_val
	variable i
	for(i=p_start; i<=p_stop; i+=1)
		wv[i]+=V_val
	endfor
end

function YorN(ctrlName, S_message, S_submessage)
	string ctrlName, S_message, S_submessage
	string S_YesOrNo
	Prompt S_YesOrNo, S_submessage, popup "Yes; No"
	doprompt S_message, S_YesOrNo
	if(abs(cmpstr( S_YesOrNo, "Yes")))
		return 0
	else
		return 1
	endif
end

function MakeWavesFromList(L_Wavenames, L_nPoints, F_complex)
	String L_Wavenames, L_nPoints
	variable F_complex
	variable V_nWaves=ItemsInList(L_Wavenames)
	variable V_nDim=ItemsInList(L_nPoints)
	variable V_nRow=str2num(StringFromList(0, L_nPoints))
	variable V_nColumn=str2num(StringFromList(1, L_nPoints))
	variable V_nLayer=str2num(StringFromList(2, L_nPoints))
	variable V_nChank=str2num(StringFromList(3, L_nPoints))
	variable i_wave, i_dim
	for(i_wave=0; i_wave<V_nWaves; i_wave+=1)
		if(F_complex)
			make /C/O/D/N=(V_nRow,V_nColumn,V_nLayer,V_nChank) $StringFromList(i_wave, L_Wavenames)
		else
			make /O/D/N=(V_nRow,V_nColumn,V_nLayer,V_nChank) $StringFromList(i_wave, L_Wavenames)
		endif
	endfor
end

function SetScaleWavesFromList(L_Wavenames, V_dim, L_start, L_EndorStep, L_Unit, F_inclusive)
	String L_Wavenames
	variable V_dim
	string L_start, L_EndorStep, L_Unit
	variable F_inclusive
	variable V_nWaves=ItemsInList(L_Wavenames)
	variable V_nDim=V_dim
	variable i_wave, i_dim
	for(i_wave=0; i_wave<V_nWaves; i_wave+=1)
		for(i_dim=0; i_dim<V_nDim; i_dim+=1)
		switch(i_dim)
			case 0://Row
				if(F_inclusive)
					SetScale /I x, str2num(StringFromList(i_dim, L_start)), str2num(StringFromList(i_dim, L_EndorStep)), StringFromList(i_dim, L_Unit), $StringFromList(i_wave, L_Wavenames)
				else
					SetScale /P x, str2num(StringFromList(i_dim, L_start)), str2num(StringFromList(i_dim, L_EndorStep)), StringFromList(i_dim, L_Unit), $StringFromList(i_wave, L_Wavenames)
				endif
				break
			case 1://Column
				if(F_inclusive)
					SetScale /I y, str2num(StringFromList(i_dim, L_start)), str2num(StringFromList(i_dim, L_EndorStep)), StringFromList(i_dim, L_Unit), $StringFromList(i_wave, L_Wavenames)
				else
					SetScale /P y, str2num(StringFromList(i_dim, L_start)), str2num(StringFromList(i_dim, L_EndorStep)), StringFromList(i_dim, L_Unit), $StringFromList(i_wave, L_Wavenames)
				endif
				break
			case 2://Layer
				if(F_inclusive)
					SetScale /I z, str2num(StringFromList(i_dim, L_start)), str2num(StringFromList(i_dim, L_EndorStep)), StringFromList(i_dim, L_Unit), $StringFromList(i_wave, L_Wavenames)
				else
					SetScale /P z, str2num(StringFromList(i_dim, L_start)), str2num(StringFromList(i_dim, L_EndorStep)), StringFromList(i_dim, L_Unit), $StringFromList(i_wave, L_Wavenames)
				endif
				break
			case 3://Chank
				if(F_inclusive)
					SetScale /I t, str2num(StringFromList(i_dim, L_start)), str2num(StringFromList(i_dim, L_EndorStep)), StringFromList(i_dim, L_Unit), $StringFromList(i_wave, L_Wavenames)
				else
					SetScale /P t, str2num(StringFromList(i_dim, L_start)), str2num(StringFromList(i_dim, L_EndorStep)), StringFromList(i_dim, L_Unit), $StringFromList(i_wave, L_Wavenames)
				endif
				break
			default:
		endswitch
		endfor
	endfor
end

function CopyScaleWavesFromList(S_srcwavename, L_Wavenames, F_inclusive)
	String S_srcwavename, L_Wavenames
	variable F_inclusive
	variable V_nWaves=ItemsInList(L_Wavenames)
	variable i_wave
	for(i_wave=0; i_wave<V_nWaves; i_wave+=1)
		if(F_inclusive)
			CopyScales /I $S_srcwavename, $StringFromList(i_wave, L_Wavenames)
		else
			CopyScales /P $S_srcwavename, $StringFromList(i_wave, L_Wavenames)
		endif
	endfor
end

function Reconst3DtoVector(L_XYZ_Src, S_Vector_Dist, F_complex)
	string L_XYZ_Src, S_Vector_Dist
	variable F_complex
	variable i
	for(i=0; i<3; i+=1)
		if(F_complex)
			wave /C W_Src_C=$StringFromList(i, L_XYZ_Src)
			wave /C W_Vector_Dist_C=$S_Vector_Dist
			W_Vector_Dist_C[][][i][]=W_Src_C[p][q][s]
		else
			wave W_Src=$StringFromList(i, L_XYZ_Src)
			wave W_Vector_Dist=$S_Vector_Dist
			W_Vector_Dist[][][i][]=W_Src[p][q][s]
		endif
	
	endfor
end


function OffsetCmp(L_wv)
	string L_wv
	variable n=itemsinlist(L_wv)
	variable V_maxAVG=-inf
	variable V_minAVG=inf
	variable i
	for(i=0; i<n; i+=1)
		wave wv=$StringFromList(i, L_wv)
		V_maxAVG=max(V_maxAVG, mean(wv))
		V_minAVG=min(V_minAVG, mean(wv))
	endfor
	variable V_meanAVG=(V_maxAVG+V_minAVG)/2
	for(i=0; i<n; i+=1)
		wave wv=$StringFromList(i, L_wv)
		wv*=V_meanAVG/mean(wv)
	endfor
	return V_meanAVG
end

function /S AvgedWave(L_wv, S_wvAvg)
	string L_wv
	string S_wvAvg
	duplicate /O $StringFromList(1, L_wv), $S_wvAvg
	wave W_avg=$S_wvAvg
	W_avg=0
	variable n=itemsinlist(L_wv)
	variable i
	for(i=0; i<n; i+=1)
		wave wv=$StringFromList(i, L_wv)
		W_avg+=wv
	endfor
	W_avg/=n
		print n
	return S_wvAvg

end

Function GetConfig(S_WN_config, V_No)
	string S_WN_config
	variable V_No
	wave W_config=$S_WN_config
	return W_config[V_No]
end

function x2pnt_MD(wname, F_dim, val)
	string wname
	variable F_dim, val
	wave wv=$wname
	return (val - DimOffset(wv, F_dim))/DimDelta(wv,F_dim)
end

function pnt2x_MD(wname, F_dim, val)
	string wname
	variable F_dim, val
	wave wv=$wname
	return DimOffset(wv, F_dim) + val *DimDelta(wv, F_dim)
end

function /S GetWaveStats_Wave(wv)
	wave wv
	wavestats /W /Q wv
	string S_wname="SW_"+nameofwave(wv)
	duplicate /O M_WaveStats, $S_wname
	return S_wname
end


function /S AddStrWN(wv, S_AddStr)
	wave wv
	string S_AddStr
	duplicate /O /D wv, $nameofwave(wv)+S_AddStr
	return nameofwave(wv)+S_AddStr
end

function /T SaveAllWaves(F_format, S_Pass, S_WaveMatchStr, S_WaveList_Option)
	//F_format=1: igor bin
	//              2: igor text
	//              3: del text
	variable F_format
	string S_Pass, S_WaveMatchStr, S_WaveList_Option
	NewPath /O DataFolder S_Pass
	string L_wavelist=WaveList(S_WaveMatchStr, ";", S_WaveList_Option)
	variable V_n=ItemsInList(L_wavelist)
	print V_n, "waves"
	string S_wname
	variable i
	for(i=0; i<V_n; i+=1)
		//print i
		S_wname=StringFromList(i, L_wavelist)
		switch(F_format)
			case 1://igor bin
				Save/A=0/C/O /P=DataFolder $S_wname as S_wname+".ibw"
				break
			case 2://igor text
				Save/A=0/T /P=DataFolder $S_wname as S_wname+".itx"
				break
			case 3://del text
				Save/A=0/J/W /P=DataFolder $S_wname as S_wname+".txt"
				break
			default:
		endswitch
	endfor
	return S_Pass
end


function /T MaxMinSumAvgOfWaveList(L_wavelist)
	string L_wavelist
	variable V_n=itemsinlist(L_wavelist)
	variable i, V_Wmax, V_Wmin, V_Wsum, V_Wavg
	V_Wmax=-inf
	V_Wmin=inf
	V_Wsum=0
	V_Wavg=0
	for(i=0; i<V_n; i+=1)
		wavestats /Q $StringFromList(i, L_wavelist)
		//print i ,StringFromList(i, L_wavelist)
		//print V_max, V_min
		if(V_min<V_Wmin)
			V_Wmin=V_min
		endif
		if(V_max>V_Wmax)
			V_Wmax=V_max
		endif
		V_Wsum+=V_sum
		V_Wavg+=V_avg
	endfor
	V_Wavg/=V_n
	//print V_Wmax, V_Wmin
	return num2str(V_Wmax)+";"+num2str(V_Wmin)+";"+num2str(V_Wsum)+";"+num2str(V_Wavg)
end


function NanEracer(WV)
	wave wv
	variable i, n=dimsize(wv, 0)
	for(i=0; i<n; i+=1)
		if(wv[i])
		else
			wv[i]=(wv[i-1]+wv[i+1])/2
		endif
	endfor
end

function /S NormAwithB(W_A, W_B)
	wave W_A, W_B
	wavestats /Q /M=1 W_B
	string S_wname=nameofwave(W_A)+"_Nrm"
	duplicate /O /D W_A, $S_wname
	wave W_A_Nrm=$S_wname
	W_A_Nrm/=V_max
	return S_wname
end

function OverWriteCfg(S_wavename, I_config, V_value)
	string S_wavename
	variable I_config, V_value
	wave W_config=$S_wavename
	W_config[I_config]=V_value
	return V_value
end

function GetCfg(S_wavename, I_config)
	string S_wavename
	variable I_config
	wave W_config=$S_wavename
	return W_config[I_config]
end

function /S GetCfg_2DS(S_CfgName, V_R, V_C)
	string S_CfgName
	variable V_R, V_C
	wave /T W_config=$S_CfgName
	return W_config[V_R][V_C]
end
	
function /S OverWriteCfg_2DS(S_CfgName, V_R, V_C, S_Val)
	string S_CfgName
	variable V_R, V_C
	string S_Val
	wave /T W_config=$S_CfgName
	W_config[V_R][V_C]=S_Val
	return W_config[V_R][V_C]
end


function /T AddStr_Wavename(wv, S_prefix, F_suffix)
	wave wv
	string S_prefix, F_suffix
	string S_wn=S_prefix+nameofwave(wv)+F_suffix
	rename wv, $S_wn
	return S_wn
end

function AddStr_Wavename_L(L_WN, S_prefix, F_suffix)
	string L_WN, S_prefix, F_suffix
	variable n=itemsinlist(L_WN)
	variable i
	for(i=0; i<n; i+=1)
		AddStr_Wavename($StringFromList(i, L_WN), S_prefix, F_suffix)
	endfor
end

function printWMSetVariableAction(sva)
	struct WMSetVariableAction &sva
	print "ctrlName",sva.ctrlName
	print "win",sva.win
	print "eventCod",sva.eventCode
	print "eventMod",sva.eventMod
	print "userData",sva.userData
	print "blockRee",sva.blockReentry
	print "isStr",sva.isStr
	print "dval",sva.dval
	print "sval",sva.sval
	print "vName",sva.vName
	print "svwave",sva.svwave
	print "rowindex",sva.rowindex
	print "rowlabel",sva.rowlabel
	print "colindex",sva.colindex
	print "collabel",sva.collabel
end

function /D Gconst_func(V_x, V_Xend)
	variable V_x, V_Xend
	if(V_x<V_Xend/2)
		return 2/V_Xend^2*V_x
	elseif(V_x<V_Xend)
		return -2/V_Xend^2*(V_x-V_Xend)^2
	else
		return 1
	endif
end

function EdgeCnt(W_wave, V_diff)
	wave W_wave
	variable V_diff
	variable n=numpnts(W_wave)
	variable i
	variable V_val=0
	for(i=0; i<n; i+=1)
		if(abs(W_wave[i]-W_wave[i+1])>V_diff)
			V_val+=1
		endif
	endfor
	return V_val
end

